#!/usr/bin/perl -w
#
# John the Ripper benchmark output conversion tool, revision 1
# Copyrigth (c) 2012, Frank Dittrich
# Some code might be borrowed from the relbench script,
# Copyright (2) 2011 Solar Designer, because the code has
# originally been added as a patch to relbench.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted.  (This is a heavily cut-down "BSD license".)
#
# The script is used to unify the benchmark (./john --test) output
# of different John the Ripper versions (official or Jumbo)
# so that the format names match those used in the newest (Jumbo) version.
#
# This allows to use two files with benchmark output to be used
# with relbench.
#
# This Perl script reads "john --test" benchmark output from STDIN
# and writes the converted benchmark output to STDOUT.
#
# You can either use
#
# ./john --test > benchmark-orig.txt
#
# ./benchmark-unify < benchmark-orig.txt > benchmark-converted.txt
#
# Or, you can use
#
# ./john --test | ./benchmark-unify > benchmark-converted.txt
#
# in case you don't need the original file
#
# If you want to create a file with benchmark output and see the
# benchmark output on the screen while the benchmark runs, you can
# also use
#
# ./john --test | ./benchmark-unify | tee benchmark-converted.txt
#
# Two of those converted benchmark output files can be used with
# relbench, usually resulting in a higher number of matching
# format names which allow to compare the benchmark results
# of different benchmark runs.
#

sub parse
{
	chomp;
	# john-1.7.6-jumbo-12 still used md5_gen(n) instead of dynamic_n
	s/^Benchmarking: +md5_gen\(([0-9]+)\):? +/Benchmarking: dynamic_$1: /;
	s/^(Benchmarking: dynamic_[0-9]+):? ([^[]+)\[/$1 [$2/;
	($name,$end) = /^Benchmarking: ([^\[]*[^ ]) +(\[.*\].*)$/;
	if (defined($name) && defined($end)) {
		$name =~ s/\s+/ /g;
		$end =~ s/\s+/ /g;
		if (defined($renamed{$name})) {
			$name = $renamed{$name};
		}
		print "Benchmarking: $name $end\n";
	}
	else {
		print "$_\n";
	}
}

$_ = '';

while(<DATA>) {
	chomp;
	($old_format, $new_format) = /^(.*)	(.*)$/;
	if(defined($new_format) && defined($old_format)) {
		# FIXME: Should I check that no format name appears
		#        both as an old name and as a new name?
		#        I don't want to map
		#        old -> new -> even newer
		#        or old -> new and new -> old
		$renamed{$old_format} = $new_format;
	}
}

$_ = '';

while (<>) {
	parse();
}

# Mapping old format names to new ones, separated by \t
# old	new
# Currently not mapped john-1.7.9-jumbo-5 format names:
#
# HMAC MD5	HMAC MD5
# format name unchanged, but benchmark changed from Raw: to
# Only one salt: / Many salts:
#
# ssh	SSH RSA/DSA
# test vector has changed: (one 2048-bit RSA and one 1024-bit DSA key)
#
# For readability, please keep this list sorted by old format name
# (ignoring case, so use sort -f or sort --ignore-case, please)
__DATA__
bf-opencl, OpenBSD Blowfish (x32)	bcrypt-opencl ("$2a$05", 32 iterations)
BSDI DES (x725)	bsdicrypt, BSDI crypt(3) ("_J9..", 725 iterations)
crypt-MD5	md5crypt
DIGEST-MD5	DIGEST-MD5 C/R
Eggdrop	Eggdrop Blowfish
EPiServer SID Hashes	EPiServer SID salted SHA-1
FreeBSD MD5	md5crypt
generic crypt(3)	crypt, generic crypt(3)
generic crypt(3) DES	crypt, generic crypt(3)
hmailserver	hMailServer salted SHA-256
HTTP Digest access authentication	HTTP Digest access authentication MD5
IPB2 MD5	Invision Power Board 2.x salted MD5
Kerberos AFS DES	AFS, Kerberos AFS
Kerberos v4 TGT	Kerberos v4 TGT DES
Kerberos v5 TGT	Kerberos v5 TGT 3DES
KRB5 aes256-cts-hmac-sha1-96	Kerberos 5 db etype 18 aes256-cts-hmac-sha1-96
KRB5 arcfour-hmac	Kerberos 5 db etype 23 rc4-hmac
LM DES	LM
Lotus5	Lotus Notes/Domino 5
M$ Cache Hash 2 (DCC2)	M$ Cache Hash 2 (DCC2) PBKDF2-HMAC-SHA-1
M$ Cache Hash	M$ Cache Hash (DCC) MD4
M$ Cache Hash MD4	M$ Cache Hash (DCC) MD4
MediaWiki -- md5($s.'-'.md5($p))	MediaWiki md5($s.'-'.md5($p))
More Secure Internet Password	Lotus Notes/Domino 6 More Secure Internet Password
Mozilla SHA-1 3DES	Mozilla (key3.db) SHA-1 3DES
MS Kerberos 5 AS-REQ Pre-Auth	Kerberos 5 AS-REQ Pre-Auth etype 23 md4, rc4-hmac-md5
MS Kerberos 5 AS-REQ Pre-Auth MD4 MD5 RC4	Kerberos 5 AS-REQ Pre-Auth etype 23 md4, rc4-hmac-md5
MS-SQL05	MS SQL 2005 SHA-1
MS-SQL	MS SQL SHA-1
MySQL 4.1 double-SHA-1	MySQL 4.1+ double-SHA-1
MYSQL_fast	MySQL pre-4.1
MySQL	MySQL pre-4.1
MYSQL	MySQL pre-4.1
Netscape LDAP SHA	Netscape LDAP SHA-1
NT v2	NT MD4
ODF SHA-1 Blowfish	ODF SHA-1 Blowfish / SHA-256 AES
Office 2007/2010 SHA-1/AES	Office 2007/2010 (SHA-1) / 2013 (SHA-512), with AES
OpenBSD Blowfish (x32)	bcrypt ("$2a$05", 32 iterations)
Oracle 11g	Oracle 11g SHA-1
Oracle	Oracle 10 DES
PDF MD5 RC4	PDF MD5 SHA-2 RC4 / AES
pdf	PDF MD5 SHA-2 RC4 / AES
PHPass MD5	phpass MD5 ($P$9)
PHPS -- md5(md5($pass).$salt)	PHPS md5(md5($pass).$salt)
PIX MD5	Cisco PIX MD5
pkzip	PKZIP
rar	RAR3 SHA-1 AES (4 characters)
Raw SHA	Raw SHA-0
SAP BCODE	SAP CODVN B (BCODE)
SAP CODVN G (PASSCODE)	SAP CODVN F/G (PASSCODE)
sybasease	Sybase ASE salted SHA-256
Traditional DES	descrypt, traditional crypt(3)
Tripcode DES	tripcode
WPA-PSK PBKDF2-HMAC-SHA-1	WPA/WPA2 PSK PBKDF2-HMAC-SHA-1
zip	WinZip PBKDF2-HMAC-SHA-1
